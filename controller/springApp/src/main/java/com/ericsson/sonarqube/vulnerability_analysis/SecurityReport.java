package com.ericsson.sonarqube.vulnerability_analysis;

import com.ericsson.mongo.issues.SonarQubeIssue;
import com.ericsson.mongo.issues.SortedIssues;
import com.ericsson.mongo.reports.SecurityHotspot;
import com.ericsson.mongo.reports.Vulnerabilities;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@JsonIgnoreProperties(ignoreUnknown = true)
public class SecurityReport {
    Logger logger = LoggerFactory.getLogger(com.ericsson.sonarqube.vulnerability_analysis.SecurityReport.class);
    int total;
    SonarQubeIssue [] issues;

    public int getTotal() {
        return total;
    }

    public void setTotal(int total) {
        this.total = total;
    }

    public SonarQubeIssue[] getIssues() {
        return issues;
    }

    public void setIssues(SonarQubeIssue[] issues) {
        this.issues = issues;
    }

    public SortedIssues sortIssues() {
        SortedIssues sortedIssues = new SortedIssues();
        for(SonarQubeIssue issue: this.getIssues()) {
            for (String type : issue.getTags()) {
                if (type.startsWith("owasp")) {
                    int index = Integer.parseInt(type.replaceAll("[a-zA-Z-]", "")) - 1;
                    switch (issue.getType()) {
                        case VULNERABILITY:
                            Vulnerabilities vulnerability = new Vulnerabilities(issue.getKey(), issue.getType(), index, issue.getSeverity().toString(), issue.getStatus().toString(), issue.getCreationDate(), issue.getUpdateDate(), issue.getTextRange());
                            vulnerability.setComponent(issue.getComponent());
                            vulnerability.setMessage(issue.getMessage());
                            sortedIssues.getVulnerabilities().add(vulnerability);

                            break;
                        case SECURITY_HOTSPOT:
                            SecurityHotspot securityHotspot = new SecurityHotspot(issue.getKey(), issue.getType(), index, issue.getStatus().toString(), issue.getCreationDate(), issue.getUpdateDate(), issue.getTextRange());
                            securityHotspot.setComponent(issue.getComponent());
                            securityHotspot.setMessage(issue.getMessage());
                            sortedIssues.getSecurityHotspots().add(securityHotspot);
                            break;
                        default:
                            logger.warn("[{}] Ignoring owasp issue in SecurityReport sortIssues method because it is not a vulnerability or security hotspot.", issue.getKey());
                            break;
                    }
                }
            }
        }
        return sortedIssues;
    }
}
