package com.ericsson.sonarqube.vulnerability_analysis;

import com.ericsson.mongo.connection.DBConnection;
import com.ericsson.mongo.issues.SonarQubeIssue;
import com.ericsson.mongo.reports.OwaspCategory;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class SonarControllerTests {
    @Mock
    SonarQubeClient sonarQubeClient;

    @InjectMocks
    private DummySonarController sonarController;

    @Test
    void default_route_should_return_running() {
        assertThat(sonarController.rootRoute())
                .contains("Running");
    }

    @Test
    void sonarqube_route_should_return_SonarProject_object() {
        Mockito
                .when(sonarQubeClient.getSonarProject("project-key"))
                .thenReturn(new SonarProject());
        assertThat(sonarController.sonarqube("project-key")).isInstanceOf(SonarProject.class);
    }

    @Test
    void totalVulnerabilities_route_should_return_5() {
        SonarProject project = new SonarProject();
        project.setTotal(5);
        Mockito
                .when(sonarQubeClient.getSonarProject("project-key"))
                .thenReturn(project);
        assertThat(sonarController.totalVulnerabilities("project-key")).isEqualTo(5);
    }

    @Test
    void validateAuth_route_returns_ok() {
        Mockito
                .when(sonarQubeClient.validateAuth())
                .thenReturn("true");
        assertThat(sonarController.validateAuth())
                .contains("true");
    }

    @Test
    void getAllProjects_route_returns_list_of_strings() {
        Mockito
                .when(sonarQubeClient.getAllProjects())
                .thenReturn(new ArrayList<>());
        assertThat(sonarController.getAllProjects())
                .isEqualTo(new ArrayList<String>());
    }

    @Test
    void old_report_returns_a_security_report() {
        Mockito
                .when(sonarQubeClient.generateReport("project-key"))
                .thenReturn(new SecurityReport());
        assertThat(sonarController.generateOldReport("project-key"))
                .isInstanceOf(SecurityReport.class);
    }

    @Test
    void report_returns_a_map_of_integer_OwaspCategory() {
        SecurityReport securityReport = new SecurityReport();
        securityReport.setIssues(new SonarQubeIssue[0]);
        Mockito
                .when(sonarQubeClient.generateReport("project-key"))
                .thenReturn(securityReport);
        assertThat(sonarController.generateReport("project-key"))
                .isInstanceOf(HashMap.class);
    }

    @Test
    void insert_project_does_not_return_anything() {
        try (MockedStatic<DBConnection> dbConnectionMockedStatic = Mockito.mockStatic(DBConnection.class)) {
            dbConnectionMockedStatic.when(() -> DBConnection.insertProject(new HashMap<>(), "project-key"))
                    .thenAnswer(I -> null);
            SonarController sonarController = new SonarController();
            sonarController.insertProject(new HashMap<>(), "project-key");
            assertThat(sonarController).isNotNull();
        }
    }

    static class DummySonarController extends SonarController {
        @Override
        public void insertProject(Map<Integer, OwaspCategory> categories, String projectKey) {
            // Overriding DB connection for unit tests.
        }
    }
}
