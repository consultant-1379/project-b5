package com.ericsson.sonarqube.vulnerability_analysis;

import com.ericsson.mongo.connection.DBConnection;
import com.ericsson.mongo.issues.ProjectKeys;
import com.ericsson.mongo.issues.SonarComponent;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.web.client.RestTemplate;

import java.lang.reflect.Array;
import java.util.ArrayList;

import static org.assertj.core.api.Assertions.*;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class SonarQubeClientTests {
    @Mock
    RestTemplate restTemplate;
    @InjectMocks
    SonarQubeClient sonarQubeClient;

    @Test
    void getSonarProject_should_return_a_SonarProject_object() {
        Mockito.when(restTemplate.getForObject("https://codeanalyzer2.internal.ericsson.com/api/issues/search?resolved=false&s=FILE_LINE&cwe=unknown&ps=100&organization=default-organization&facets=owaspTop10,sansTop25,cwe&componentKeys=project-key", SonarProject.class))
                .thenReturn(new SonarProject());
        assertThat(sonarQubeClient.getSonarProject("project-key"))
                .isInstanceOf(SonarProject.class);
    }

    @Test
    void validateAuth_should_return_true() {
        Mockito.when(sonarQubeClient.validateAuth())
                .thenReturn("true");
        assertThat(sonarQubeClient.validateAuth())
                .contains("true");
    }

    @Test
    void getAllProjects_should_return_a_list_of_empty_strings_if_null() {
        try (MockedStatic<DBConnection> dbConnectionMockedStatic = Mockito.mockStatic(DBConnection.class)) {
            dbConnectionMockedStatic.when(DBConnection::getAllProjects)
                    .thenReturn(new ArrayList<String>());
            assertThat(sonarQubeClient.getAllProjects()).isEqualTo(new ArrayList<String>());
        }
    }

    @Test
    void getAllProjects_should_return_a_list_of_strings() {
        SonarComponent sonarComponent = new SonarComponent();
        sonarComponent.setKey("test-key");
        ProjectKeys projectKeys = new ProjectKeys();
        projectKeys.setComponents(new SonarComponent[]{sonarComponent});
        Mockito.when(restTemplate.getForObject("https://codeanalyzer2.internal.ericsson.com/api/components/search?qualifiers=TRK&ps=500", ProjectKeys.class))
                .thenReturn(projectKeys);
        ArrayList<String> result = new ArrayList<>();
        result.add("test-key");
        assertThat(sonarQubeClient.getAllProjects()).isEqualTo(result);
    }

    @Test
    void generateReport_should_return_a_security_report() {
        Mockito.when(restTemplate.getForObject("https://codeanalyzer2.internal.ericsson.com/api/issues/search?componentKeys=project-key&owaspTop10=a1,a2,a3,a4,a5,a6,a7,a8,a9,a10", SecurityReport.class))
                .thenReturn(new SecurityReport());
        assertThat(sonarQubeClient.generateReport("project-key"))
                .isInstanceOf(SecurityReport.class);
    }
}
